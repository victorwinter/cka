# Cluster Architecture, Installation & Configuration

Para a prática do cenário de **Cluster Architecture, Installation & Configuration** da certificação **Certified Kubernetes Administrator (CKA)**, este repositório utilizará duas máquinas virtuais (VMs) provisionadas na AWS (Amazon Web Services), com a configuração **t2.medium**. 

Esse ambiente simula um cenário de cluster Kubernetes com dois nós: 
- Um provisionado para configurações e elementos do **control-plane**.
- Outro relacionado ao **worker node**.

Será utilizado o **kubeadm** para configurar e gerenciar o cluster Kubernetes, pois é uma das ferramentas e abordagens oficialmente cobradas no exame CKA.

Este cenário é parte do exame CKA descrito no currículo definido pela **Cloud Native Computing Foundation (CNCF)**:  
[Curriculum CKA v1.31](https://github.com/cncf/curriculum/blob/master/CKA_Curriculum_v1.31.pdf)

## Detalhes da Configuração

- **Plataforma**: AWS (Amazon Web Services)
- **Tipo de Instância**: 2 máquinas virtuais com o tipo de instância **t2.medium** (2vCPU e 4GB de memória)
- **Sistema Operacional**: Ubuntu Server 22.04 LTS 64 Bit
- **Uso**: 
  - Uma máquina virtual será configurada como **Master Node**
  - A outra como **Worker Node**
- **Security Group (SG)**:
  - Crie um novo SG para as instâncias do Kubernetes, garantindo que ele permita o acesso **SSH** (porta 22) da sua máquina local (ou de um intervalo de IPs seguro).
- **Storage**: 30GB
- **Chave SSH**: Crie uma chave SSH para posterior conexão via terminal.
- Durante a criação das máquinas EC2, copie o ID gerado pelo **Security Group** e acesse a seção **Edit Inbound Rules**.
  - Adicione uma regra de **All traffic** com **Source** configurado para o ID do próprio security group.

> **Observação**: Embora a liberação de **All traffic** não seja uma prática recomendada para produção, ela será necessária para fins de exemplificação deste cenário. **Não utilize essa configuração em ambientes de produção**.

- **Nomes das máquinas**:
  - Renomeie as máquinas para `cka-control-plane` (Master Node) e `cka-node` (Worker Node).

## Conectando nas Máquinas EC2

1. Após realizar o download da chave **(.pem)** gerada pela AWS, copie-a para um diretório de sua preferência.
2. Conceda permissão **chmod 400** para a chave.
3. Conecte-se via SSH na máquina definida como **control-plane**:
   
   ```bash
   ssh ubuntu@ip-do-host -i chave.pem
   ```

## Instalação do Kubernetes com `kubeadm`

### Passo 1: Instalação da versão **v1.31** do Kubernetes

Para este primeiro cenário, iremos seguir a documentação oficial do Kubernetes, utilizando a versão **v1.31** para posteriormente executar a atualização.

[Documentação Oficial do Kubernetes - Instalação](https://v1-31.docs.kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/)

### Passo 2: Comandos para Instalar os Componentes

Conectado na máquina **control-plane**, execute os comandos abaixo conforme a documentação oficial:

```bash
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
```

Baixe a chave GPG e adicione o repositório:

```bash
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
```

Adicione o repositório do Kubernetes:

```bash
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
```

Atualize os pacotes e instale os componentes Kubernetes:

```bash
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl  # Para evitar que os componentes sejam atualizados
```

Habilite o serviço **kubelet**:

```bash
sudo systemctl enable --now kubelet
```

## Configuração do **containerd**

O **containerd** será utilizado como o runtime de contêineres neste cenário. Ele é um componente fundamental para o funcionamento do Kubernetes, responsável pela execução e gerenciamento de contêineres.

Embora a configuração do **containerd** não seja cobrada no exame CKA, pois ele já virá pré-configurado em muitas distribuições Kubernetes, é importante demonstrar a configuração para melhor entendimento e aprofundamento.

### Passo a Passo para Configuração do **containerd**:

1. **Ativar módulos de Kernel (Overlay e br_netfilter)**:

   ```bash
   cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
   overlay
   br_netfilter
   EOF
   ```

2. **Carregar os módulos**:

   ```bash
   sudo modprobe overlay
   sudo modprobe br_netfilter
   ```

3. **Habilitar flags de rede** (ex: ipforward, netbridge):

   Crie o arquivo `/etc/sysctl.d/kubernetes.conf` e adicione o seguinte conteúdo:

   ```bash
   net.ipv4.ip_forward = 1
   net.ipv4.conf.all.forwarding = 1
   net.ipv6.conf.all.forwarding = 1
   net.bridge.bridge-nf-call-iptables  = 1
   net.bridge.bridge-nf-call-ip6tables = 1
   net.ipv4.conf.all.rp_filter = 0
   net.ipv6.conf.all.rp_filter = 0
   ```

   Após salvar o arquivo, execute:

   ```bash
   sudo sysctl --system
   ```

4. **Instalar o **containerd**:

   ```bash
   apt install -y containerd
   mkdir -p /etc/containerd
   ```

5. **Gerar o arquivo de configuração do **containerd**:

   ```bash
   containerd config default > /etc/containerd/config.toml
   ```

6. **Alterar configuração para usar o Systemd**:

   ```bash
   sed -i 's/SystemdCgroup.*/SystemdCgroup = true/g' /etc/containerd/config.toml
   ```

7. **Iniciar o **containerd**:

   ```bash
   systemctl enable containerd
   systemctl start containerd
   systemctl status containerd
   ```

---

## Inicializando o Cluster com `kubeadm init`

### Passo 1: Inicializar o **Master Node**

Após executar os passos anteriores, inicialize o **master node** com o comando:

```bash
kubeadm init
```

### Passo 2: Finalizar a Configuração

Após a execução do `kubeadm init`, execute os seguintes comandos para concluir a configuração do cluster:

```bash
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
```

---

## Configuração da **Container Network Interface (CNI)**

A instalação da **CNI** não é cobrada diretamente na certificação, mas é necessária para que o node fique com o status **Ready**.

### Instalação do Cilium CNI:

1. **Baixar e instalar o binário do Cilium**:

   ```bash
   CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
   CLI_ARCH=amd64
   if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
   curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
   sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
   sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
   rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
   ```

2. **Instalar o Cilium**:

   ```bash
   cilium install
   ```

3. **Verificar o status da instalação**:

   ```bash
   cilium status
   ```

4. **Verificar se o node está "Ready"**:

   ```bash
   kubectl get node
   ```

---

Esse formato melhora a legibilidade e organização das informações, tornando mais fácil a navegação e compreensão dos passos para configurar o cluster Kubernetes e os componentes necessários.
